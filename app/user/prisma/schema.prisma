// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// START 后台用户相关

// 基础用户模型
model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  nickname String
  username String @unique
  phone    String @unique
  password String

  // 是否是超级管理员【只允许从数据库调整，禁止api录入】
  is_super Boolean @default(false)

  roles UserRoleLinks[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("users")
}

// 权限（角色）模型，与 AdminUser 为 多对多关系
model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users UserRoleLinks[]

  permissions RolePermissionLinks[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("roles")
}

enum PermissionType {
  MENU
  API
}

// 权限模型
model Permission {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  permission_type PermissionType

  // 父级权限
  parent_id Int?
  parent    Permission?  @relation("ParentChild", fields: [parent_id], references: [id])
  children  Permission[] @relation("ParentChild")

  roles RolePermissionLinks[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("permissions")
}

// 显示的定义角色用户多对多关系
model UserRoleLinks {
  user_id Int
  role_id Int
  // ... 其他字段

  user User @relation(fields: [user_id], references: [id])
  role Role @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
  @@map("user_role_links")
}

// 显示的定义角色权限多对多关系
model RolePermissionLinks {
  role_id       Int
  permission_id Int
  // ... 其他字段

  role       Role       @relation(fields: [role_id], references: [id])
  permission Permission @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id])
  @@map("role_permission_links")
}

// 前端用户相关
// 1. 用户信息表 绑定微信注册信息，其他需要就加字段
// 2. 用户作品表绑定用户作品信息 基本就是图片

// 前台用用户信息表
model FrontUser {
  // 用户id
  id          Int     @id @default(autoincrement())
  // 微信openid
  openid      String  @unique
  // 微信session_key
  session_key String?
  // 昵称 [需要程序限制，不超过24个字符]
  nickname    String
  // 头像
  avatar      String  @db.VarChar(255)
  // 地址
  address     String? @db.VarChar(255)
  // 电话 [只接受中国大陆用户的微信认证]
  phone       String? @db.VarChar(11)

  // 用户状态[0:拉黑 1:正常]
  status Int @default(1)

  // 用户金币[调用API后扣除]
  gold Int @default(0)

  // 用户作品
  works UserWork[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  transactions Transaction[]

  @@index([openid])
  @@map("front_users")
}

// 作品来源
enum WorkType {
  // 自己构建的作品 如AI绘图使用创建的
  BUILD
  // 上传自己的本地作品
  UPLOAD
  // 生成的产品（用商品生产的）
  BUILD_PRODUCT
}

// 作品创作方式
enum WorkCreateType {
  NONE
  // 图生图
  CREATE_BY_IMAGE
  // 文生图
  CREATE_BY_TEXT
  // 抠图 这个是用其他作品抠出来的
  PHOTOSHOP
  // 合成型的，如生产的商品
  COMPOSITE
}

// 用户作品表
model UserWork {
  // 作品id
  id          Int              @id @default(autoincrement())
  // 作品名称
  name        String
  // 作品描述、简介
  description String
  // 作品封面 上传的图片就是作品
  cover       String?
  // 作品内容[作品地址]
  content     String           @db.VarChar(255)
  // 产品型作品，多图
  images      UserWorkImages[]
  // 作品状态 默认都是1 如果外部传入0 指定内容为草稿，用于用户下次进来快速支持的
  status      Int              @default(1)

  // 作品信息 [记录一些图片的本身信息]
  info String? @db.Text

  // 是否公开作品
  is_public  Boolean  @default(false) @db.TinyInt
  // 是否收藏
  is_collect Boolean  @default(false) @db.TinyInt
  // 作品来源
  source     WorkType

  // 创作方式
  create_type      WorkCreateType
  // 创建方式=CREATE_BY_IMAGE时 可能得作品id
  create_parent_id Int?
  parent           UserWork?      @relation("ParentChild", fields: [create_parent_id], references: [id])
  children         UserWork[]     @relation("ParentChild")

  // 标记用户是否删除该内容【为了做垃圾箱】
  is_delete Boolean @default(false) @db.TinyInt

  // 特殊业务绑定 原始的作品id
  product_id Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // 用户id
  user_id Int
  // 用户信息
  user    FrontUser @relation(fields: [user_id], references: [id])

  @@map("user_works")
}

// 用户作品的多个图片
model UserWorkImages {
  // 图片id
  id  Int    @id @default(autoincrement())
  // 图片地址
  url String @db.VarChar(255)

  // 图片的其他信息 0 = 正面 1 = 背面
  front_type Int @default(0)

  // 作品id
  work_id Int
  // 作品信息
  work    UserWork @relation(fields: [work_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("user_work_images")
}

model SecretKey {
  id       Int     @id @default(autoincrement())
  key      String  @unique
  gold     Int
  consumed Boolean @default(false) // 标记是否已被消费

  Transaction Transaction[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([key])
  @@map("secret_keys")
}

model Transaction {
  id            Int       @id @default(autoincrement())
  user_id       Int
  user          FrontUser @relation(fields: [user_id], references: [id])
  secret_key_id Int
  secret_key    SecretKey @relation(fields: [secret_key_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([user_id])
  @@index([secret_key_id])
  @@map("transactions")
}
